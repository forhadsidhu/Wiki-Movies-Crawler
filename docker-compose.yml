version: '3.7'


services:
  web:
    build: ""
    command: >
      sh -c "python /code/movie_api/manage.py producer &&
      python manage.py runserver 0.0.0.0:8000"

    env_file:
      - web-variables.env
    tty: true
    volumes:
      - .:/code
    ports:
      - 8000:8000
    depends_on:
      - db

    # rabbit_mq container uses the default rabbitmq image
    # exposes the ports
    # uses the specified volume
  rabbit_mq:

    # we use management image to get the
    # plugin for web dashboard
    image: rabbitmq:3.8-rc-management
    container_name: rabbit_mq
    ports:
      - '5672:5672'
      - '15672:15672'
#    volumes:
#      - rabbit_mqdata:/usr/share/rabbitmq/data

  # produces container builds the producer image
  # and produces message to the queue
  producer:
    build: ""
    depends_on:
      - rabbit_mq
    environment:
      AMQP_URL: 'amqp://rabbit_mq?connection_attempts=10&retry_delay=10'
#    volumes:
#      - ./producer:/usr/src/app/producer
#
#  # consumer container builds the consumer image
#  # and consumes messages from the queue
#  # we spawn 2 consumer containers to run parallely
#  # on the same queue
#  consumer1:
#    build: ""
#    depends_on:
#      - rabbit_mq
#    environment:
#      AMQP_URL: 'amqp://rabbit_mq?connection_attempts=10&retry_delay=10'
#    volumes:
#      - ./consumer:/usr/src/app/consumer
#  consumer2:
#    build: consumer
#    depends_on:
#      - rabbit_mq
#    environment:
#      AMQP_URL: 'amqp://rabbit_mq?connection_attempts=10&retry_delay=10'
#    volumes:
#      - ./consumer:/usr/src/app/consumer

  db:
    image: postgres:11
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - "POSTGRES_HOST_AUTH_METHOD=trust"
volumes:
  postgres_data:


